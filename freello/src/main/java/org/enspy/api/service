package org.enspy.freello;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.enspy.api.model.*;
import org.enspy.api.repository.*;

import lombok.Data;





@Service
public class TaskService {

    @Autowired
    private TaskRepository taskRepository;

    public Optional<Task> getTask(final int id) {
        return taskRepository.findById(id);
    }

    public Iterable<Task> getAllTasks() {
        return taskRepository.findAll();
    }

    public void deleteTask(final int id) {
        taskRepository.deleteById(id);
    }

    public Task saveTask(Task task) {
        return taskRepository.save(task);
    }
}


@Service
public class UserService {

    @Autowired
    private UserRepository userRepository;


    public Optional<User> getUser(final int id) {
        return userRepository.findById(id);
    }

    public Iterable<User> getAllUsers() {
        return userRepository.findAll();
    }

    public void deleteUser(final int id) {
        userRepository.deleteById(id);
    }

    public User saveUser(User user) {
        return userRepository.save(user);
    }
}


@Service
public class ProjectService {

    @Autowired
    private ProjectRepository projectRepository;

    public Optional<Project> getProject(final int id) {
        return projectRepository.findById(id);
    }

    public Iterable<Project> getAllProjects() {
        return projectRepository.findAll();
    }

    public void deleteProject(final int id) {
        projectRepository.deleteById(id);
    }

    public Project saveProject(Project project) {
        return projectRepository.save(project);
    }
}


@Service
public class ProjectMemberService {

    @Autowired
    private ProjectMemberRepository projectMemberRepository;

    public Optional<ProjectMember> getProjectMember(final int projectId, final int userId) {
        return projectMemberRepository.findById(new ProjectMemberId(projectId, userId));
    }

    public Iterable<ProjectMember> getAllProjectMembers() {
        return projectMemberRepository.findAll();
    }

    public void deleteProjectMember(final int projectId, final int userId) {
        projectMemberRepository.deleteById(new ProjectMemberId(projectId, userId));
    }

    public ProjectMember saveProjectMember(ProjectMember projectMember) {
        return projectMemberRepository.save(projectMember);
    }
}



@Service
public class TaskWorkerService {

    @Autowired
    private TaskWorkerRepository taskWorkerRepository;

    public Optional<TaskWorker> getTaskWorker(final int taskId, final int userId) {
        return taskWorkerRepository.findById(new TaskWorkerId(taskId, userId));
    }

    public Iterable<TaskWorker> getAllTaskWorkers() {
        return taskWorkerRepository.findAll();
    }

    public void deleteTaskWorker(final int taskId, final int userId) {
        taskWorkerRepository.deleteById(new TaskWorkerId(taskId, userId));
    }

    public TaskWorker saveTaskWorker(TaskWorker taskWorker) {
        return taskWorkerRepository.save(taskWorker);
    }
}
